{"version":3,"file":"escrow_near.js","sources":["../node_modules/near-sdk-js/lib/utils.js","../node_modules/@scure/base/lib/esm/index.js","../node_modules/near-sdk-js/lib/types/public_key.js","../node_modules/near-sdk-js/lib/types/vm_types.js","../node_modules/near-sdk-js/lib/api.js","../node_modules/near-sdk-js/lib/collections/lookup-map.js","../node_modules/near-sdk-js/lib/collections/vector.js","../node_modules/near-sdk-js/lib/collections/unordered-map.js","../node_modules/near-sdk-js/lib/near-bindgen.js","../node_modules/near-sdk-js/lib/promise.js","../src/escrow.ts"],"sourcesContent":["// make PromiseIndex a nominal typing\nvar PromiseIndexBrand;\n(function (PromiseIndexBrand) {\n    PromiseIndexBrand[PromiseIndexBrand[\"_\"] = -1] = \"_\";\n})(PromiseIndexBrand || (PromiseIndexBrand = {}));\nconst TYPE_KEY = \"typeInfo\";\nvar TypeBrand;\n(function (TypeBrand) {\n    TypeBrand[\"BIGINT\"] = \"bigint\";\n    TypeBrand[\"DATE\"] = \"date\";\n})(TypeBrand || (TypeBrand = {}));\nexport const ERR_INCONSISTENT_STATE = \"The collection is an inconsistent state. Did previous smart contract execution terminate unexpectedly?\";\nexport const ERR_INDEX_OUT_OF_BOUNDS = \"Index out of bounds\";\nconst ACCOUNT_ID_REGEX = /^(([a-z\\d]+[-_])*[a-z\\d]+\\.)*([a-z\\d]+[-_])*[a-z\\d]+$/;\n/**\n * Concat two Uint8Array\n * @param array1\n * @param array2\n * @returns the concatenation of two array\n */\nexport function concat(array1, array2) {\n    const mergedArray = new Uint8Array(array1.length + array2.length);\n    mergedArray.set(array1);\n    mergedArray.set(array2, array1.length);\n    return mergedArray;\n}\n/**\n * Asserts that the expression passed to the function is truthy, otherwise throws a new Error with the provided message.\n *\n * @param expression - The expression to be asserted.\n * @param message - The error message to be printed.\n */\nexport function assert(expression, message) {\n    if (!expression) {\n        throw new Error(\"assertion failed: \" + message);\n    }\n}\nexport function getValueWithOptions(value, options = {\n    deserializer: deserialize,\n}) {\n    if (value === null) {\n        return options?.defaultValue ?? null;\n    }\n    const deserialized = deserialize(value);\n    if (deserialized === undefined || deserialized === null) {\n        return options?.defaultValue ?? null;\n    }\n    if (options?.reconstructor) {\n        return options.reconstructor(deserialized);\n    }\n    return deserialized;\n}\nexport function serializeValueWithOptions(value, { serializer } = {\n    serializer: serialize,\n}) {\n    return serializer(value);\n}\nexport function serialize(valueToSerialize) {\n    return encode(JSON.stringify(valueToSerialize, function (key, value) {\n        if (typeof value === \"bigint\") {\n            return {\n                value: value.toString(),\n                [TYPE_KEY]: TypeBrand.BIGINT,\n            };\n        }\n        if (typeof this[key] === \"object\" &&\n            this[key] !== null &&\n            this[key] instanceof Date) {\n            return {\n                value: this[key].toISOString(),\n                [TYPE_KEY]: TypeBrand.DATE,\n            };\n        }\n        return value;\n    }));\n}\nexport function deserialize(valueToDeserialize) {\n    return JSON.parse(decode(valueToDeserialize), (_, value) => {\n        if (value !== null &&\n            typeof value === \"object\" &&\n            Object.keys(value).length === 2 &&\n            Object.keys(value).every((key) => [\"value\", TYPE_KEY].includes(key))) {\n            switch (value[TYPE_KEY]) {\n                case TypeBrand.BIGINT:\n                    return BigInt(value[\"value\"]);\n                case TypeBrand.DATE:\n                    return new Date(value[\"value\"]);\n            }\n        }\n        return value;\n    });\n}\n/**\n * Validates the Account ID according to the NEAR protocol\n * [Account ID rules](https://nomicon.io/DataStructures/Account#account-id-rules).\n *\n * @param accountId - The Account ID string you want to validate.\n */\nexport function validateAccountId(accountId) {\n    return (accountId.length >= 2 &&\n        accountId.length <= 64 &&\n        ACCOUNT_ID_REGEX.test(accountId));\n}\n/**\n * A subset of NodeJS TextEncoder API\n */\nexport class TextEncoder {\n    encode(s) {\n        return env.utf8_string_to_uint8array(s);\n    }\n}\n/**\n * A subset of NodeJS TextDecoder API. Only support utf-8 and latin1 encoding.\n */\nexport class TextDecoder {\n    constructor(encoding = \"utf-8\") {\n        this.encoding = encoding;\n    }\n    decode(a) {\n        if (this.encoding == \"utf-8\") {\n            return env.uint8array_to_utf8_string(a);\n        }\n        else if (this.encoding == \"latin1\") {\n            return env.uint8array_to_latin1_string(a);\n        }\n        else {\n            throw new Error(\"unsupported encoding: \" + this.encoding);\n        }\n    }\n}\n/**\n * Convert a string to Uint8Array, each character must have a char code between 0-255.\n * @param s - string that with only Latin1 character to convert\n * @returns result Uint8Array\n */\nexport function bytes(s) {\n    return env.latin1_string_to_uint8array(s);\n}\n/**\n * Convert a Uint8Array to string, each uint8 to the single character of that char code\n * @param a - Uint8Array to convert\n * @returns result string\n */\nexport function str(a) {\n    return env.uint8array_to_latin1_string(a);\n}\n/**\n * Encode the string to Uint8Array with UTF-8 encoding\n * @param s - String to encode\n * @returns result Uint8Array\n */\nexport function encode(s) {\n    return env.utf8_string_to_uint8array(s);\n}\n/**\n * Decode the Uint8Array to string in UTF-8 encoding\n * @param a - array to decode\n * @returns result string\n */\nexport function decode(a) {\n    return env.uint8array_to_utf8_string(a);\n}\n","/*! scure-base - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nexport function assertNumber(n) {\n    if (!Number.isSafeInteger(n))\n        throw new Error(`Wrong integer: ${n}`);\n}\nfunction chain(...args) {\n    const wrap = (a, b) => (c) => a(b(c));\n    const encode = Array.from(args)\n        .reverse()\n        .reduce((acc, i) => (acc ? wrap(acc, i.encode) : i.encode), undefined);\n    const decode = args.reduce((acc, i) => (acc ? wrap(acc, i.decode) : i.decode), undefined);\n    return { encode, decode };\n}\nfunction alphabet(alphabet) {\n    return {\n        encode: (digits) => {\n            if (!Array.isArray(digits) || (digits.length && typeof digits[0] !== 'number'))\n                throw new Error('alphabet.encode input should be an array of numbers');\n            return digits.map((i) => {\n                assertNumber(i);\n                if (i < 0 || i >= alphabet.length)\n                    throw new Error(`Digit index outside alphabet: ${i} (alphabet: ${alphabet.length})`);\n                return alphabet[i];\n            });\n        },\n        decode: (input) => {\n            if (!Array.isArray(input) || (input.length && typeof input[0] !== 'string'))\n                throw new Error('alphabet.decode input should be array of strings');\n            return input.map((letter) => {\n                if (typeof letter !== 'string')\n                    throw new Error(`alphabet.decode: not string element=${letter}`);\n                const index = alphabet.indexOf(letter);\n                if (index === -1)\n                    throw new Error(`Unknown letter: \"${letter}\". Allowed: ${alphabet}`);\n                return index;\n            });\n        },\n    };\n}\nfunction join(separator = '') {\n    if (typeof separator !== 'string')\n        throw new Error('join separator should be string');\n    return {\n        encode: (from) => {\n            if (!Array.isArray(from) || (from.length && typeof from[0] !== 'string'))\n                throw new Error('join.encode input should be array of strings');\n            for (let i of from)\n                if (typeof i !== 'string')\n                    throw new Error(`join.encode: non-string input=${i}`);\n            return from.join(separator);\n        },\n        decode: (to) => {\n            if (typeof to !== 'string')\n                throw new Error('join.decode input should be string');\n            return to.split(separator);\n        },\n    };\n}\nfunction padding(bits, chr = '=') {\n    assertNumber(bits);\n    if (typeof chr !== 'string')\n        throw new Error('padding chr should be string');\n    return {\n        encode(data) {\n            if (!Array.isArray(data) || (data.length && typeof data[0] !== 'string'))\n                throw new Error('padding.encode input should be array of strings');\n            for (let i of data)\n                if (typeof i !== 'string')\n                    throw new Error(`padding.encode: non-string input=${i}`);\n            while ((data.length * bits) % 8)\n                data.push(chr);\n            return data;\n        },\n        decode(input) {\n            if (!Array.isArray(input) || (input.length && typeof input[0] !== 'string'))\n                throw new Error('padding.encode input should be array of strings');\n            for (let i of input)\n                if (typeof i !== 'string')\n                    throw new Error(`padding.decode: non-string input=${i}`);\n            let end = input.length;\n            if ((end * bits) % 8)\n                throw new Error('Invalid padding: string should have whole number of bytes');\n            for (; end > 0 && input[end - 1] === chr; end--) {\n                if (!(((end - 1) * bits) % 8))\n                    throw new Error('Invalid padding: string has too much padding');\n            }\n            return input.slice(0, end);\n        },\n    };\n}\nfunction normalize(fn) {\n    if (typeof fn !== 'function')\n        throw new Error('normalize fn should be function');\n    return { encode: (from) => from, decode: (to) => fn(to) };\n}\nfunction convertRadix(data, from, to) {\n    if (from < 2)\n        throw new Error(`convertRadix: wrong from=${from}, base cannot be less than 2`);\n    if (to < 2)\n        throw new Error(`convertRadix: wrong to=${to}, base cannot be less than 2`);\n    if (!Array.isArray(data))\n        throw new Error('convertRadix: data should be array');\n    if (!data.length)\n        return [];\n    let pos = 0;\n    const res = [];\n    const digits = Array.from(data);\n    digits.forEach((d) => {\n        assertNumber(d);\n        if (d < 0 || d >= from)\n            throw new Error(`Wrong integer: ${d}`);\n    });\n    while (true) {\n        let carry = 0;\n        let done = true;\n        for (let i = pos; i < digits.length; i++) {\n            const digit = digits[i];\n            const digitBase = from * carry + digit;\n            if (!Number.isSafeInteger(digitBase) ||\n                (from * carry) / from !== carry ||\n                digitBase - digit !== from * carry) {\n                throw new Error('convertRadix: carry overflow');\n            }\n            carry = digitBase % to;\n            digits[i] = Math.floor(digitBase / to);\n            if (!Number.isSafeInteger(digits[i]) || digits[i] * to + carry !== digitBase)\n                throw new Error('convertRadix: carry overflow');\n            if (!done)\n                continue;\n            else if (!digits[i])\n                pos = i;\n            else\n                done = false;\n        }\n        res.push(carry);\n        if (done)\n            break;\n    }\n    for (let i = 0; i < data.length - 1 && data[i] === 0; i++)\n        res.push(0);\n    return res.reverse();\n}\nconst gcd = (a, b) => (!b ? a : gcd(b, a % b));\nconst radix2carry = (from, to) => from + (to - gcd(from, to));\nfunction convertRadix2(data, from, to, padding) {\n    if (!Array.isArray(data))\n        throw new Error('convertRadix2: data should be array');\n    if (from <= 0 || from > 32)\n        throw new Error(`convertRadix2: wrong from=${from}`);\n    if (to <= 0 || to > 32)\n        throw new Error(`convertRadix2: wrong to=${to}`);\n    if (radix2carry(from, to) > 32) {\n        throw new Error(`convertRadix2: carry overflow from=${from} to=${to} carryBits=${radix2carry(from, to)}`);\n    }\n    let carry = 0;\n    let pos = 0;\n    const mask = 2 ** to - 1;\n    const res = [];\n    for (const n of data) {\n        assertNumber(n);\n        if (n >= 2 ** from)\n            throw new Error(`convertRadix2: invalid data word=${n} from=${from}`);\n        carry = (carry << from) | n;\n        if (pos + from > 32)\n            throw new Error(`convertRadix2: carry overflow pos=${pos} from=${from}`);\n        pos += from;\n        for (; pos >= to; pos -= to)\n            res.push(((carry >> (pos - to)) & mask) >>> 0);\n        carry &= 2 ** pos - 1;\n    }\n    carry = (carry << (to - pos)) & mask;\n    if (!padding && pos >= from)\n        throw new Error('Excess padding');\n    if (!padding && carry)\n        throw new Error(`Non-zero padding: ${carry}`);\n    if (padding && pos > 0)\n        res.push(carry >>> 0);\n    return res;\n}\nfunction radix(num) {\n    assertNumber(num);\n    return {\n        encode: (bytes) => {\n            if (!(bytes instanceof Uint8Array))\n                throw new Error('radix.encode input should be Uint8Array');\n            return convertRadix(Array.from(bytes), 2 ** 8, num);\n        },\n        decode: (digits) => {\n            if (!Array.isArray(digits) || (digits.length && typeof digits[0] !== 'number'))\n                throw new Error('radix.decode input should be array of strings');\n            return Uint8Array.from(convertRadix(digits, num, 2 ** 8));\n        },\n    };\n}\nfunction radix2(bits, revPadding = false) {\n    assertNumber(bits);\n    if (bits <= 0 || bits > 32)\n        throw new Error('radix2: bits should be in (0..32]');\n    if (radix2carry(8, bits) > 32 || radix2carry(bits, 8) > 32)\n        throw new Error('radix2: carry overflow');\n    return {\n        encode: (bytes) => {\n            if (!(bytes instanceof Uint8Array))\n                throw new Error('radix2.encode input should be Uint8Array');\n            return convertRadix2(Array.from(bytes), 8, bits, !revPadding);\n        },\n        decode: (digits) => {\n            if (!Array.isArray(digits) || (digits.length && typeof digits[0] !== 'number'))\n                throw new Error('radix2.decode input should be array of strings');\n            return Uint8Array.from(convertRadix2(digits, bits, 8, revPadding));\n        },\n    };\n}\nfunction unsafeWrapper(fn) {\n    if (typeof fn !== 'function')\n        throw new Error('unsafeWrapper fn should be function');\n    return function (...args) {\n        try {\n            return fn.apply(null, args);\n        }\n        catch (e) { }\n    };\n}\nfunction checksum(len, fn) {\n    assertNumber(len);\n    if (typeof fn !== 'function')\n        throw new Error('checksum fn should be function');\n    return {\n        encode(data) {\n            if (!(data instanceof Uint8Array))\n                throw new Error('checksum.encode: input should be Uint8Array');\n            const checksum = fn(data).slice(0, len);\n            const res = new Uint8Array(data.length + len);\n            res.set(data);\n            res.set(checksum, data.length);\n            return res;\n        },\n        decode(data) {\n            if (!(data instanceof Uint8Array))\n                throw new Error('checksum.decode: input should be Uint8Array');\n            const payload = data.slice(0, -len);\n            const newChecksum = fn(payload).slice(0, len);\n            const oldChecksum = data.slice(-len);\n            for (let i = 0; i < len; i++)\n                if (newChecksum[i] !== oldChecksum[i])\n                    throw new Error('Invalid checksum');\n            return payload;\n        },\n    };\n}\nexport const utils = { alphabet, chain, checksum, radix, radix2, join, padding };\nexport const base16 = chain(radix2(4), alphabet('0123456789ABCDEF'), join(''));\nexport const base32 = chain(radix2(5), alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZ234567'), padding(5), join(''));\nexport const base32hex = chain(radix2(5), alphabet('0123456789ABCDEFGHIJKLMNOPQRSTUV'), padding(5), join(''));\nexport const base32crockford = chain(radix2(5), alphabet('0123456789ABCDEFGHJKMNPQRSTVWXYZ'), join(''), normalize((s) => s.toUpperCase().replace(/O/g, '0').replace(/[IL]/g, '1')));\nexport const base64 = chain(radix2(6), alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'), padding(6), join(''));\nexport const base64url = chain(radix2(6), alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_'), padding(6), join(''));\nconst genBase58 = (abc) => chain(radix(58), alphabet(abc), join(''));\nexport const base58 = genBase58('123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz');\nexport const base58flickr = genBase58('123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ');\nexport const base58xrp = genBase58('rpshnaf39wBUDNEGHJKLM4PQRST7VWXYZ2bcdeCg65jkm8oFqi1tuvAxyz');\nconst XMR_BLOCK_LEN = [0, 2, 3, 5, 6, 7, 9, 10, 11];\nexport const base58xmr = {\n    encode(data) {\n        let res = '';\n        for (let i = 0; i < data.length; i += 8) {\n            const block = data.subarray(i, i + 8);\n            res += base58.encode(block).padStart(XMR_BLOCK_LEN[block.length], '1');\n        }\n        return res;\n    },\n    decode(str) {\n        let res = [];\n        for (let i = 0; i < str.length; i += 11) {\n            const slice = str.slice(i, i + 11);\n            const blockLen = XMR_BLOCK_LEN.indexOf(slice.length);\n            const block = base58.decode(slice);\n            for (let j = 0; j < block.length - blockLen; j++) {\n                if (block[j] !== 0)\n                    throw new Error('base58xmr: wrong padding');\n            }\n            res = res.concat(Array.from(block.slice(block.length - blockLen)));\n        }\n        return Uint8Array.from(res);\n    },\n};\nexport const base58check = (sha256) => chain(checksum(4, (data) => sha256(sha256(data))), base58);\nconst BECH_ALPHABET = chain(alphabet('qpzry9x8gf2tvdw0s3jn54khce6mua7l'), join(''));\nconst POLYMOD_GENERATORS = [0x3b6a57b2, 0x26508e6d, 0x1ea119fa, 0x3d4233dd, 0x2a1462b3];\nfunction bech32Polymod(pre) {\n    const b = pre >> 25;\n    let chk = (pre & 0x1ffffff) << 5;\n    for (let i = 0; i < POLYMOD_GENERATORS.length; i++) {\n        if (((b >> i) & 1) === 1)\n            chk ^= POLYMOD_GENERATORS[i];\n    }\n    return chk;\n}\nfunction bechChecksum(prefix, words, encodingConst = 1) {\n    const len = prefix.length;\n    let chk = 1;\n    for (let i = 0; i < len; i++) {\n        const c = prefix.charCodeAt(i);\n        if (c < 33 || c > 126)\n            throw new Error(`Invalid prefix (${prefix})`);\n        chk = bech32Polymod(chk) ^ (c >> 5);\n    }\n    chk = bech32Polymod(chk);\n    for (let i = 0; i < len; i++)\n        chk = bech32Polymod(chk) ^ (prefix.charCodeAt(i) & 0x1f);\n    for (let v of words)\n        chk = bech32Polymod(chk) ^ v;\n    for (let i = 0; i < 6; i++)\n        chk = bech32Polymod(chk);\n    chk ^= encodingConst;\n    return BECH_ALPHABET.encode(convertRadix2([chk % 2 ** 30], 30, 5, false));\n}\nfunction genBech32(encoding) {\n    const ENCODING_CONST = encoding === 'bech32' ? 1 : 0x2bc830a3;\n    const _words = radix2(5);\n    const fromWords = _words.decode;\n    const toWords = _words.encode;\n    const fromWordsUnsafe = unsafeWrapper(fromWords);\n    function encode(prefix, words, limit = 90) {\n        if (typeof prefix !== 'string')\n            throw new Error(`bech32.encode prefix should be string, not ${typeof prefix}`);\n        if (!Array.isArray(words) || (words.length && typeof words[0] !== 'number'))\n            throw new Error(`bech32.encode words should be array of numbers, not ${typeof words}`);\n        const actualLength = prefix.length + 7 + words.length;\n        if (limit !== false && actualLength > limit)\n            throw new TypeError(`Length ${actualLength} exceeds limit ${limit}`);\n        prefix = prefix.toLowerCase();\n        return `${prefix}1${BECH_ALPHABET.encode(words)}${bechChecksum(prefix, words, ENCODING_CONST)}`;\n    }\n    function decode(str, limit = 90) {\n        if (typeof str !== 'string')\n            throw new Error(`bech32.decode input should be string, not ${typeof str}`);\n        if (str.length < 8 || (limit !== false && str.length > limit))\n            throw new TypeError(`Wrong string length: ${str.length} (${str}). Expected (8..${limit})`);\n        const lowered = str.toLowerCase();\n        if (str !== lowered && str !== str.toUpperCase())\n            throw new Error(`String must be lowercase or uppercase`);\n        str = lowered;\n        const sepIndex = str.lastIndexOf('1');\n        if (sepIndex === 0 || sepIndex === -1)\n            throw new Error(`Letter \"1\" must be present between prefix and data only`);\n        const prefix = str.slice(0, sepIndex);\n        const _words = str.slice(sepIndex + 1);\n        if (_words.length < 6)\n            throw new Error('Data must be at least 6 characters long');\n        const words = BECH_ALPHABET.decode(_words).slice(0, -6);\n        const sum = bechChecksum(prefix, words, ENCODING_CONST);\n        if (!_words.endsWith(sum))\n            throw new Error(`Invalid checksum in ${str}: expected \"${sum}\"`);\n        return { prefix, words };\n    }\n    const decodeUnsafe = unsafeWrapper(decode);\n    function decodeToBytes(str) {\n        const { prefix, words } = decode(str, false);\n        return { prefix, words, bytes: fromWords(words) };\n    }\n    return { encode, decode, decodeToBytes, decodeUnsafe, fromWords, fromWordsUnsafe, toWords };\n}\nexport const bech32 = genBech32('bech32');\nexport const bech32m = genBech32('bech32m');\nexport const utf8 = {\n    encode: (data) => new TextDecoder().decode(data),\n    decode: (str) => new TextEncoder().encode(str),\n};\nexport const hex = chain(radix2(4), alphabet('0123456789abcdef'), join(''), normalize((s) => {\n    if (typeof s !== 'string' || s.length % 2)\n        throw new TypeError(`hex.decode: expected string, got ${typeof s} with length ${s.length}`);\n    return s.toLowerCase();\n}));\nconst CODERS = {\n    utf8, hex, base16, base32, base64, base64url, base58, base58xmr\n};\nconst coderTypeError = `Invalid encoding type. Available types: ${Object.keys(CODERS).join(', ')}`;\nexport const bytesToString = (type, bytes) => {\n    if (typeof type !== 'string' || !CODERS.hasOwnProperty(type))\n        throw new TypeError(coderTypeError);\n    if (!(bytes instanceof Uint8Array))\n        throw new TypeError('bytesToString() expects Uint8Array');\n    return CODERS[type].encode(bytes);\n};\nexport const str = bytesToString;\nexport const stringToBytes = (type, str) => {\n    if (!CODERS.hasOwnProperty(type))\n        throw new TypeError(coderTypeError);\n    if (typeof str !== 'string')\n        throw new TypeError('stringToBytes() expects string');\n    return CODERS[type].decode(str);\n};\nexport const bytes = stringToBytes;\n","import { base58 } from \"@scure/base\";\nimport { concat } from \"../utils\";\nexport var CurveType;\n(function (CurveType) {\n    CurveType[CurveType[\"ED25519\"] = 0] = \"ED25519\";\n    CurveType[CurveType[\"SECP256K1\"] = 1] = \"SECP256K1\";\n})(CurveType || (CurveType = {}));\nvar DataLength;\n(function (DataLength) {\n    DataLength[DataLength[\"ED25519\"] = 32] = \"ED25519\";\n    DataLength[DataLength[\"SECP256K1\"] = 64] = \"SECP256K1\";\n})(DataLength || (DataLength = {}));\nfunction getCurveType(curveType) {\n    switch (curveType) {\n        case CurveType.ED25519:\n        case CurveType.SECP256K1:\n            return curveType;\n        default:\n            throw new UnknownCurve();\n    }\n}\nfunction dataLength(curveType) {\n    switch (curveType) {\n        case CurveType.ED25519:\n        case CurveType.SECP256K1:\n            return {\n                [CurveType.ED25519]: DataLength.ED25519,\n                [CurveType.SECP256K1]: DataLength.SECP256K1,\n            }[curveType];\n        default:\n            throw new UnknownCurve();\n    }\n}\nfunction splitKeyTypeData(value) {\n    const idx = value.indexOf(\":\");\n    if (idx >= 0) {\n        return [\n            curveTypeFromStr(value.substring(0, idx)),\n            value.substring(idx + 1),\n        ];\n    }\n    else {\n        return [CurveType.ED25519, value];\n    }\n}\nexport function curveTypeFromStr(value) {\n    switch (value) {\n        case \"ed25519\":\n            return CurveType.ED25519;\n        case \"secp256k1\":\n            return CurveType.SECP256K1;\n        default:\n            throw new UnknownCurve();\n    }\n}\nexport class ParsePublicKeyError extends Error {\n}\nexport class InvalidLengthError extends ParsePublicKeyError {\n    constructor(length, expectedLength) {\n        super(`Invalid length: ${length}. Expected: ${expectedLength}`);\n        this.length = length;\n        this.expectedLength = expectedLength;\n    }\n}\nexport class Base58Error extends ParsePublicKeyError {\n    constructor(error) {\n        super(`Base58 error: ${error}`);\n        this.error = error;\n    }\n}\nexport class UnknownCurve extends ParsePublicKeyError {\n    constructor() {\n        super(\"Unknown curve\");\n    }\n}\n/**\n * A abstraction on top of the NEAR public key string.\n */\nexport class PublicKey {\n    /**\n     * @param data - The string you want to create a PublicKey from.\n     */\n    constructor(data) {\n        const curveLenght = dataLength(data[0]);\n        if (data.length !== curveLenght + 1) {\n            throw new InvalidLengthError(data.length, curveLenght + 1);\n        }\n        this.type = getCurveType(data[0]);\n        this.data = data;\n    }\n    /**\n     * The curve type of the public key.\n     */\n    curveType() {\n        return this.type;\n    }\n    /**\n     * Create a public key from a public key string.\n     *\n     * @param publicKeyString - The public key string you want to create a PublicKey from.\n     */\n    static fromString(publicKeyString) {\n        const [curve, keyData] = splitKeyTypeData(publicKeyString);\n        let data;\n        try {\n            data = base58.decode(keyData);\n        }\n        catch (error) {\n            throw new Base58Error(error.message);\n        }\n        return new PublicKey(concat(new Uint8Array([curve]), data));\n    }\n}\n","/**\n * A Promise result in near can be one of:\n * - NotReady = 0 - the promise you are specifying is still not ready, not yet failed nor successful.\n * - Successful = 1 - the promise has been successfully executed and you can retrieve the resulting value.\n * - Failed = 2 - the promise execution has failed.\n */\nexport var PromiseResult;\n(function (PromiseResult) {\n    PromiseResult[PromiseResult[\"NotReady\"] = 0] = \"NotReady\";\n    PromiseResult[PromiseResult[\"Successful\"] = 1] = \"Successful\";\n    PromiseResult[PromiseResult[\"Failed\"] = 2] = \"Failed\";\n})(PromiseResult || (PromiseResult = {}));\n/**\n * A promise error can either be due to the promise failing or not yet being ready.\n */\nexport var PromiseError;\n(function (PromiseError) {\n    PromiseError[PromiseError[\"Failed\"] = 0] = \"Failed\";\n    PromiseError[PromiseError[\"NotReady\"] = 1] = \"NotReady\";\n})(PromiseError || (PromiseError = {}));\n","import { assert, str, encode, decode, } from \"./utils\";\nimport { PromiseResult } from \"./types\";\nconst U64_MAX = 2n ** 64n - 1n;\nconst EVICTED_REGISTER = U64_MAX - 1n;\n/**\n * Logs parameters in the NEAR WASM virtual machine.\n *\n * @param params - Parameters to log.\n */\nexport function log(...params) {\n    env.log(params.reduce((accumulated, parameter, index) => {\n        // Stringify undefined\n        const param = parameter === undefined ? \"undefined\" : parameter;\n        // Convert Objects to strings and convert to string\n        const stringified = typeof param === \"object\" ? JSON.stringify(param) : `${param}`;\n        if (index === 0) {\n            return stringified;\n        }\n        return `${accumulated} ${stringified}`;\n    }, \"\"));\n}\n/**\n * Returns the account ID of the account that signed the transaction.\n * Can only be called in a call or initialize function.\n */\nexport function signerAccountId() {\n    env.signer_account_id(0);\n    return str(env.read_register(0));\n}\n/**\n * Returns the public key of the account that signed the transaction.\n * Can only be called in a call or initialize function.\n */\nexport function signerAccountPk() {\n    env.signer_account_pk(0);\n    return env.read_register(0);\n}\n/**\n * Returns the account ID of the account that called the function.\n * Can only be called in a call or initialize function.\n */\nexport function predecessorAccountId() {\n    env.predecessor_account_id(0);\n    return str(env.read_register(0));\n}\n/**\n * Returns the account ID of the current contract - the contract that is being executed.\n */\nexport function currentAccountId() {\n    env.current_account_id(0);\n    return str(env.read_register(0));\n}\n/**\n * Returns the current block index.\n */\nexport function blockIndex() {\n    return env.block_index();\n}\n/**\n * Returns the current block height.\n */\nexport function blockHeight() {\n    return blockIndex();\n}\n/**\n * Returns the current block timestamp.\n */\nexport function blockTimestamp() {\n    return env.block_timestamp();\n}\n/**\n * Returns the current epoch height.\n */\nexport function epochHeight() {\n    return env.epoch_height();\n}\n/**\n * Returns the amount of NEAR attached to this function call.\n * Can only be called in payable functions.\n */\nexport function attachedDeposit() {\n    return env.attached_deposit();\n}\n/**\n * Returns the amount of Gas that was attached to this function call.\n */\nexport function prepaidGas() {\n    return env.prepaid_gas();\n}\n/**\n * Returns the amount of Gas that has been used by this function call until now.\n */\nexport function usedGas() {\n    return env.used_gas();\n}\n/**\n * Returns the current account's account balance.\n */\nexport function accountBalance() {\n    return env.account_balance();\n}\n/**\n * Returns the current account's locked balance.\n */\nexport function accountLockedBalance() {\n    return env.account_locked_balance();\n}\n/**\n * Reads the value from NEAR storage that is stored under the provided key.\n *\n * @param key - The key to read from storage.\n */\nexport function storageReadRaw(key) {\n    const returnValue = env.storage_read(key, 0);\n    if (returnValue !== 1n) {\n        return null;\n    }\n    return env.read_register(0);\n}\n/**\n * Reads the utf-8 string value from NEAR storage that is stored under the provided key.\n *\n * @param key - The utf-8 string key to read from storage.\n */\nexport function storageRead(key) {\n    const ret = storageReadRaw(encode(key));\n    if (ret !== null) {\n        return decode(ret);\n    }\n    return null;\n}\n/**\n * Checks for the existance of a value under the provided key in NEAR storage.\n *\n * @param key - The key to check for in storage.\n */\nexport function storageHasKeyRaw(key) {\n    return env.storage_has_key(key) === 1n;\n}\n/**\n * Checks for the existance of a value under the provided utf-8 string key in NEAR storage.\n *\n * @param key - The utf-8 string key to check for in storage.\n */\nexport function storageHasKey(key) {\n    return storageHasKeyRaw(encode(key));\n}\n/**\n * Get the last written or removed value from NEAR storage.\n */\nexport function storageGetEvictedRaw() {\n    return env.read_register(EVICTED_REGISTER);\n}\n/**\n * Get the last written or removed value from NEAR storage as utf-8 string.\n */\nexport function storageGetEvicted() {\n    return decode(storageGetEvictedRaw());\n}\n/**\n * Returns the current accounts NEAR storage usage.\n */\nexport function storageUsage() {\n    return env.storage_usage();\n}\n/**\n * Writes the provided bytes to NEAR storage under the provided key.\n *\n * @param key - The key under which to store the value.\n * @param value - The value to store.\n */\nexport function storageWriteRaw(key, value) {\n    return env.storage_write(key, value, EVICTED_REGISTER) === 1n;\n}\n/**\n * Writes the provided utf-8 string to NEAR storage under the provided key.\n *\n * @param key - The utf-8 string key under which to store the value.\n * @param value - The utf-8 string value to store.\n */\nexport function storageWrite(key, value) {\n    return storageWriteRaw(encode(key), encode(value));\n}\n/**\n * Removes the value of the provided key from NEAR storage.\n *\n * @param key - The key to be removed.\n */\nexport function storageRemoveRaw(key) {\n    return env.storage_remove(key, EVICTED_REGISTER) === 1n;\n}\n/**\n * Removes the value of the provided utf-8 string key from NEAR storage.\n *\n * @param key - The utf-8 string key to be removed.\n */\nexport function storageRemove(key) {\n    return storageRemoveRaw(encode(key));\n}\n/**\n * Returns the cost of storing 0 Byte on NEAR storage.\n */\nexport function storageByteCost() {\n    return 10000000000000000000n;\n}\n/**\n * Returns the arguments passed to the current smart contract call.\n */\nexport function inputRaw() {\n    env.input(0);\n    return env.read_register(0);\n}\n/**\n * Returns the arguments passed to the current smart contract call as utf-8 string.\n */\nexport function input() {\n    return decode(inputRaw());\n}\n/**\n * Returns the value from the NEAR WASM virtual machine.\n *\n * @param value - The value to return.\n */\nexport function valueReturnRaw(value) {\n    env.value_return(value);\n}\n/**\n * Returns the utf-8 string value from the NEAR WASM virtual machine.\n *\n * @param value - The utf-8 string value to return.\n */\nexport function valueReturn(value) {\n    valueReturnRaw(encode(value));\n}\n/**\n * Returns a random string of bytes.\n */\nexport function randomSeed() {\n    env.random_seed(0);\n    return env.read_register(0);\n}\n/**\n * Create a NEAR promise call to a contract on the blockchain.\n *\n * @param accountId - The account ID of the target contract.\n * @param methodName - The name of the method to be called.\n * @param args - The arguments to call the method with.\n * @param amount - The amount of NEAR attached to the call.\n * @param gas - The amount of Gas attached to the call.\n */\nexport function promiseCreateRaw(accountId, methodName, args, amount, gas) {\n    return env.promise_create(accountId, methodName, args, amount, gas);\n}\n/**\n * Create a NEAR promise call to a contract on the blockchain.\n *\n * @param accountId - The account ID of the target contract.\n * @param methodName - The name of the method to be called.\n * @param args - The utf-8 string arguments to call the method with.\n * @param amount - The amount of NEAR attached to the call.\n * @param gas - The amount of Gas attached to the call.\n */\nexport function promiseCreate(accountId, methodName, args, amount, gas) {\n    return promiseCreateRaw(accountId, methodName, encode(args), amount, gas);\n}\n/**\n * Attach a callback NEAR promise to be executed after a provided promise.\n *\n * @param promiseIndex - The promise after which to call the callback.\n * @param accountId - The account ID of the contract to perform the callback on.\n * @param methodName - The name of the method to call.\n * @param args - The arguments to call the method with.\n * @param amount - The amount of NEAR to attach to the call.\n * @param gas - The amount of Gas to attach to the call.\n */\nexport function promiseThenRaw(promiseIndex, accountId, methodName, args, amount, gas) {\n    return env.promise_then(promiseIndex, accountId, methodName, args, amount, gas);\n}\n/**\n * Attach a callback NEAR promise to be executed after a provided promise.\n *\n * @param promiseIndex - The promise after which to call the callback.\n * @param accountId - The account ID of the contract to perform the callback on.\n * @param methodName - The name of the method to call.\n * @param args - The utf-8 string arguments to call the method with.\n * @param amount - The amount of NEAR to attach to the call.\n * @param gas - The amount of Gas to attach to the call.\n */\nexport function promiseThen(promiseIndex, accountId, methodName, args, amount, gas) {\n    return promiseThenRaw(promiseIndex, accountId, methodName, encode(args), amount, gas);\n}\n/**\n * Join an arbitrary array of NEAR promises.\n *\n * @param promiseIndexes - An arbitrary array of NEAR promise indexes to join.\n */\nexport function promiseAnd(...promiseIndexes) {\n    return env.promise_and(...promiseIndexes);\n}\n/**\n * Create a NEAR promise which will have multiple promise actions inside.\n *\n * @param accountId - The account ID of the target contract.\n */\nexport function promiseBatchCreate(accountId) {\n    return env.promise_batch_create(accountId);\n}\n/**\n * Attach a callback NEAR promise to a batch of NEAR promise actions.\n *\n * @param promiseIndex - The NEAR promise index of the batch.\n * @param accountId - The account ID of the target contract.\n */\nexport function promiseBatchThen(promiseIndex, accountId) {\n    return env.promise_batch_then(promiseIndex, accountId);\n}\n/**\n * Attach a create account promise action to the NEAR promise index with the provided promise index.\n *\n * @param promiseIndex - The index of the promise to attach a create account action to.\n */\nexport function promiseBatchActionCreateAccount(promiseIndex) {\n    env.promise_batch_action_create_account(promiseIndex);\n}\n/**\n * Attach a deploy contract promise action to the NEAR promise index with the provided promise index.\n *\n * @param promiseIndex - The index of the promise to attach a deploy contract action to.\n * @param code - The WASM byte code of the contract to be deployed.\n */\nexport function promiseBatchActionDeployContract(promiseIndex, code) {\n    env.promise_batch_action_deploy_contract(promiseIndex, code);\n}\n/**\n * Attach a function call promise action to the NEAR promise index with the provided promise index.\n *\n * @param promiseIndex - The index of the promise to attach a function call action to.\n * @param methodName - The name of the method to be called.\n * @param args - The arguments to call the method with.\n * @param amount - The amount of NEAR to attach to the call.\n * @param gas - The amount of Gas to attach to the call.\n */\nexport function promiseBatchActionFunctionCallRaw(promiseIndex, methodName, args, amount, gas) {\n    env.promise_batch_action_function_call(promiseIndex, methodName, args, amount, gas);\n}\n/**\n * Attach a function call promise action to the NEAR promise index with the provided promise index.\n *\n * @param promiseIndex - The index of the promise to attach a function call action to.\n * @param methodName - The name of the method to be called.\n * @param args - The utf-8 string arguments to call the method with.\n * @param amount - The amount of NEAR to attach to the call.\n * @param gas - The amount of Gas to attach to the call.\n */\nexport function promiseBatchActionFunctionCall(promiseIndex, methodName, args, amount, gas) {\n    promiseBatchActionFunctionCallRaw(promiseIndex, methodName, encode(args), amount, gas);\n}\n/**\n * Attach a transfer promise action to the NEAR promise index with the provided promise index.\n *\n * @param promiseIndex - The index of the promise to attach a transfer action to.\n * @param amount - The amount of NEAR to transfer.\n */\nexport function promiseBatchActionTransfer(promiseIndex, amount) {\n    env.promise_batch_action_transfer(promiseIndex, amount);\n}\n/**\n * Attach a stake promise action to the NEAR promise index with the provided promise index.\n *\n * @param promiseIndex - The index of the promise to attach a stake action to.\n * @param amount - The amount of NEAR to stake.\n * @param publicKey - The public key with which to stake.\n */\nexport function promiseBatchActionStake(promiseIndex, amount, publicKey) {\n    env.promise_batch_action_stake(promiseIndex, amount, publicKey);\n}\n/**\n * Attach a add full access key promise action to the NEAR promise index with the provided promise index.\n *\n * @param promiseIndex - The index of the promise to attach a add full access key action to.\n * @param publicKey - The public key to add as a full access key.\n * @param nonce - The nonce to use.\n */\nexport function promiseBatchActionAddKeyWithFullAccess(promiseIndex, publicKey, nonce) {\n    env.promise_batch_action_add_key_with_full_access(promiseIndex, publicKey, nonce);\n}\n/**\n * Attach a add access key promise action to the NEAR promise index with the provided promise index.\n *\n * @param promiseIndex - The index of the promise to attach a add access key action to.\n * @param publicKey - The public key to add.\n * @param nonce - The nonce to use.\n * @param allowance - The allowance of the access key.\n * @param receiverId - The account ID of the receiver.\n * @param methodNames - The names of the method to allow the key for.\n */\nexport function promiseBatchActionAddKeyWithFunctionCall(promiseIndex, publicKey, nonce, allowance, receiverId, methodNames) {\n    env.promise_batch_action_add_key_with_function_call(promiseIndex, publicKey, nonce, allowance, receiverId, methodNames);\n}\n/**\n * Attach a delete key promise action to the NEAR promise index with the provided promise index.\n *\n * @param promiseIndex - The index of the promise to attach a delete key action to.\n * @param publicKey - The public key to delete.\n */\nexport function promiseBatchActionDeleteKey(promiseIndex, publicKey) {\n    env.promise_batch_action_delete_key(promiseIndex, publicKey);\n}\n/**\n * Attach a delete account promise action to the NEAR promise index with the provided promise index.\n *\n * @param promiseIndex - The index of the promise to attach a delete account action to.\n * @param beneficiaryId - The account ID of the beneficiary - the account that receives the remaining amount of NEAR.\n */\nexport function promiseBatchActionDeleteAccount(promiseIndex, beneficiaryId) {\n    env.promise_batch_action_delete_account(promiseIndex, beneficiaryId);\n}\n/**\n * Attach a function call with weight promise action to the NEAR promise index with the provided promise index.\n *\n * @param promiseIndex - The index of the promise to attach a function call with weight action to.\n * @param methodName - The name of the method to be called.\n * @param args - The arguments to call the method with.\n * @param amount - The amount of NEAR to attach to the call.\n * @param gas - The amount of Gas to attach to the call.\n * @param weight - The weight of unused Gas to use.\n */\nexport function promiseBatchActionFunctionCallWeightRaw(promiseIndex, methodName, args, amount, gas, weight) {\n    env.promise_batch_action_function_call_weight(promiseIndex, methodName, args, amount, gas, weight);\n}\n/**\n * Attach a function call with weight promise action to the NEAR promise index with the provided promise index.\n *\n * @param promiseIndex - The index of the promise to attach a function call with weight action to.\n * @param methodName - The name of the method to be called.\n * @param args - The utf-8 string arguments to call the method with.\n * @param amount - The amount of NEAR to attach to the call.\n * @param gas - The amount of Gas to attach to the call.\n * @param weight - The weight of unused Gas to use.\n */\nexport function promiseBatchActionFunctionCallWeight(promiseIndex, methodName, args, amount, gas, weight) {\n    promiseBatchActionFunctionCallWeightRaw(promiseIndex, methodName, encode(args), amount, gas, weight);\n}\n/**\n * The number of promise results available.\n */\nexport function promiseResultsCount() {\n    return env.promise_results_count();\n}\n/**\n * Returns the result of the NEAR promise for the passed promise index.\n *\n * @param promiseIndex - The index of the promise to return the result for.\n */\nexport function promiseResultRaw(promiseIndex) {\n    const status = env.promise_result(promiseIndex, 0);\n    assert(Number(status) === PromiseResult.Successful, `Promise result ${status == PromiseResult.Failed\n        ? \"Failed\"\n        : status == PromiseResult.NotReady\n            ? \"NotReady\"\n            : status}`);\n    return env.read_register(0);\n}\n/**\n * Returns the result of the NEAR promise for the passed promise index as utf-8 string\n *\n * @param promiseIndex - The index of the promise to return the result for.\n */\nexport function promiseResult(promiseIndex) {\n    return decode(promiseResultRaw(promiseIndex));\n}\n/**\n * Executes the promise in the NEAR WASM virtual machine.\n *\n * @param promiseIndex - The index of the promise to execute.\n */\nexport function promiseReturn(promiseIndex) {\n    env.promise_return(promiseIndex);\n}\n/**\n * Returns sha256 hash of given value\n * @param value - value to be hashed, in Bytes\n * @returns hash result in Bytes\n */\nexport function sha256(value) {\n    env.sha256(value, 0);\n    return env.read_register(0);\n}\n/**\n * Returns keccak256 hash of given value\n * @param value - value to be hashed, in Bytes\n * @returns hash result in Bytes\n */\nexport function keccak256(value) {\n    env.keccak256(value, 0);\n    return env.read_register(0);\n}\n/**\n * Returns keccak512 hash of given value\n * @param value - value to be hashed, in Bytes\n * @returns hash result in Bytes\n */\nexport function keccak512(value) {\n    env.keccak512(value, 0);\n    return env.read_register(0);\n}\n/**\n * Returns ripemd160 hash of given value\n * @param value - value to be hashed, in Bytes\n * @returns hash result in Bytes\n */\nexport function ripemd160(value) {\n    env.ripemd160(value, 0);\n    return env.read_register(0);\n}\n/**\n * Recovers an ECDSA signer address from a 32-byte message hash and a corresponding\n * signature along with v recovery byte. Takes in an additional flag to check for\n * malleability of the signature which is generally only ideal for transactions.\n *\n * @param hash - 32-byte message hash\n * @param sig - signature\n * @param v - number of recovery byte\n * @param malleabilityFlag - whether to check malleability\n * @returns 64 bytes representing the public key if the recovery was successful.\n */\nexport function ecrecover(hash, sig, v, malleabilityFlag) {\n    const returnValue = env.ecrecover(hash, sig, v, malleabilityFlag, 0);\n    if (returnValue === 0n) {\n        return null;\n    }\n    return env.read_register(0);\n}\n// NOTE: \"env.panic(msg)\" is not exported, use \"throw Error(msg)\" instead\n/**\n * Panic the transaction execution with given message\n * @param msg - panic message in raw bytes, which should be a valid UTF-8 sequence\n */\nexport function panicUtf8(msg) {\n    env.panic_utf8(msg);\n}\n/**\n * Log the message in transaction logs\n * @param msg - message in raw bytes, which should be a valid UTF-8 sequence\n */\nexport function logUtf8(msg) {\n    env.log_utf8(msg);\n}\n/**\n * Log the message in transaction logs\n * @param msg - message in raw bytes, which should be a valid UTF-16 sequence\n */\nexport function logUtf16(msg) {\n    env.log_utf16(msg);\n}\n/**\n * Returns the number of staked NEAR of given validator, in yoctoNEAR\n * @param accountId - validator's AccountID\n * @returns - staked amount\n */\nexport function validatorStake(accountId) {\n    return env.validator_stake(accountId);\n}\n/**\n * Returns the number of staked NEAR of all validators, in yoctoNEAR\n * @returns total staked amount\n */\nexport function validatorTotalStake() {\n    return env.validator_total_stake();\n}\n/**\n * Computes multiexp on alt_bn128 curve using Pippenger's algorithm \\sum_i\n * mul_i g_{1 i} should be equal result.\n *\n * @param value - equence of (g1:G1, fr:Fr), where\n * G1 is point (x:Fq, y:Fq) on alt_bn128,\n * alt_bn128 is Y^2 = X^3 + 3 curve over Fq.\n * `value` is encoded as packed, little-endian\n * `[((u256, u256), u256)]` slice.\n *\n * @returns multi exp sum\n */\nexport function altBn128G1Multiexp(value) {\n    env.alt_bn128_g1_multiexp(value, 0);\n    return env.read_register(0);\n}\n/**\n * Computes sum for signed g1 group elements on alt_bn128 curve \\sum_i\n * (-1)^{sign_i} g_{1 i} should be equal result.\n *\n * @param value - sequence of (sign:bool, g1:G1), where\n * G1 is point (x:Fq, y:Fq) on alt_bn128,\n * alt_bn128 is Y^2 = X^3 + 3 curve over Fq.\n * value` is encoded a as packed, little-endian\n * `[((u256, u256), ((u256, u256), (u256, u256)))]` slice.\n *\n * @returns sum over Fq.\n */\nexport function altBn128G1Sum(value) {\n    env.alt_bn128_g1_sum(value, 0);\n    return env.read_register(0);\n}\n/**\n * Computes pairing check on alt_bn128 curve.\n * \\sum_i e(g_{1 i}, g_{2 i}) should be equal one (in additive notation), e(g1, g2) is Ate pairing\n *\n * @param value - sequence of (g1:G1, g2:G2), where\n * G2 is Fr-ordered subgroup point (x:Fq2, y:Fq2) on alt_bn128 twist,\n * alt_bn128 twist is Y^2 = X^3 + 3/(i+9) curve over Fq2\n * Fq2 is complex field element (re: Fq, im: Fq)\n * G1 is point (x:Fq, y:Fq) on alt_bn128,\n * alt_bn128 is Y^2 = X^3 + 3 curve over Fq\n * `value` is encoded a as packed, little-endian\n * `[((u256, u256), ((u256, u256), (u256, u256)))]` slice.\n *\n * @returns whether pairing check pass\n */\nexport function altBn128PairingCheck(value) {\n    return env.alt_bn128_pairing_check(value) === 1n;\n}\n","import * as near from \"../api\";\nimport { getValueWithOptions, serializeValueWithOptions, encode, } from \"../utils\";\n/**\n * A lookup map that stores data in NEAR storage.\n */\nexport class LookupMap {\n    /**\n     * @param keyPrefix - The byte prefix to use when storing elements inside this collection.\n     */\n    constructor(keyPrefix) {\n        this.keyPrefix = keyPrefix;\n    }\n    /**\n     * Checks whether the collection contains the value.\n     *\n     * @param key - The value for which to check the presence.\n     */\n    containsKey(key) {\n        const storageKey = this.keyPrefix + key;\n        return near.storageHasKey(storageKey);\n    }\n    /**\n     * Get the data stored at the provided key.\n     *\n     * @param key - The key at which to look for the data.\n     * @param options - Options for retrieving the data.\n     */\n    get(key, options) {\n        const storageKey = this.keyPrefix + key;\n        const value = near.storageReadRaw(encode(storageKey));\n        return getValueWithOptions(value, options);\n    }\n    /**\n     * Removes and retrieves the element with the provided key.\n     *\n     * @param key - The key at which to remove data.\n     * @param options - Options for retrieving the data.\n     */\n    remove(key, options) {\n        const storageKey = this.keyPrefix + key;\n        if (!near.storageRemove(storageKey)) {\n            return options?.defaultValue ?? null;\n        }\n        const value = near.storageGetEvictedRaw();\n        return getValueWithOptions(value, options);\n    }\n    /**\n     * Store a new value at the provided key.\n     *\n     * @param key - The key at which to store in the collection.\n     * @param newValue - The value to store in the collection.\n     * @param options - Options for retrieving and storing the data.\n     */\n    set(key, newValue, options) {\n        const storageKey = this.keyPrefix + key;\n        const storageValue = serializeValueWithOptions(newValue, options);\n        if (!near.storageWriteRaw(encode(storageKey), storageValue)) {\n            return options?.defaultValue ?? null;\n        }\n        const value = near.storageGetEvictedRaw();\n        return getValueWithOptions(value, options);\n    }\n    /**\n     * Extends the current collection with the passed in array of key-value pairs.\n     *\n     * @param keyValuePairs - The key-value pairs to extend the collection with.\n     * @param options - Options for storing the data.\n     */\n    extend(keyValuePairs, options) {\n        for (const [key, value] of keyValuePairs) {\n            this.set(key, value, options);\n        }\n    }\n    /**\n     * Serialize the collection.\n     *\n     * @param options - Options for storing the data.\n     */\n    serialize(options) {\n        return serializeValueWithOptions(this, options);\n    }\n    /**\n     * Converts the deserialized data from storage to a JavaScript instance of the collection.\n     *\n     * @param data - The deserialized data to create an instance from.\n     */\n    static reconstruct(data) {\n        return new LookupMap(data.keyPrefix);\n    }\n}\n","import * as near from \"../api\";\nimport { assert, getValueWithOptions, serializeValueWithOptions, ERR_INCONSISTENT_STATE, ERR_INDEX_OUT_OF_BOUNDS, str, bytes, } from \"../utils\";\nfunction indexToKey(prefix, index) {\n    const data = new Uint32Array([index]);\n    const array = new Uint8Array(data.buffer);\n    const key = str(array);\n    return prefix + key;\n}\n/**\n * An iterable implementation of vector that stores its content on the trie.\n * Uses the following map: index -> element\n */\nexport class Vector {\n    /**\n     * @param prefix - The byte prefix to use when storing elements inside this collection.\n     * @param length - The initial length of the collection. By default 0.\n     */\n    constructor(prefix, length = 0) {\n        this.prefix = prefix;\n        this.length = length;\n    }\n    /**\n     * Checks whether the collection is empty.\n     */\n    isEmpty() {\n        return this.length === 0;\n    }\n    /**\n     * Get the data stored at the provided index.\n     *\n     * @param index - The index at which to look for the data.\n     * @param options - Options for retrieving the data.\n     */\n    get(index, options) {\n        if (index >= this.length) {\n            return options?.defaultValue ?? null;\n        }\n        const storageKey = indexToKey(this.prefix, index);\n        const value = near.storageReadRaw(bytes(storageKey));\n        return getValueWithOptions(value, options);\n    }\n    /**\n     * Removes an element from the vector and returns it in serialized form.\n     * The removed element is replaced by the last element of the vector.\n     * Does not preserve ordering, but is `O(1)`.\n     *\n     * @param index - The index at which to remove the element.\n     * @param options - Options for retrieving and storing the data.\n     */\n    swapRemove(index, options) {\n        assert(index < this.length, ERR_INDEX_OUT_OF_BOUNDS);\n        if (index + 1 === this.length) {\n            return this.pop(options);\n        }\n        const key = indexToKey(this.prefix, index);\n        const last = this.pop(options);\n        assert(near.storageWriteRaw(bytes(key), serializeValueWithOptions(last, options)), ERR_INCONSISTENT_STATE);\n        const value = near.storageGetEvictedRaw();\n        return getValueWithOptions(value, options);\n    }\n    /**\n     * Adds data to the collection.\n     *\n     * @param element - The data to store.\n     * @param options - Options for storing the data.\n     */\n    push(element, options) {\n        const key = indexToKey(this.prefix, this.length);\n        this.length += 1;\n        near.storageWriteRaw(bytes(key), serializeValueWithOptions(element, options));\n    }\n    /**\n     * Removes and retrieves the element with the highest index.\n     *\n     * @param options - Options for retrieving the data.\n     */\n    pop(options) {\n        if (this.isEmpty()) {\n            return options?.defaultValue ?? null;\n        }\n        const lastIndex = this.length - 1;\n        const lastKey = indexToKey(this.prefix, lastIndex);\n        this.length -= 1;\n        assert(near.storageRemoveRaw(bytes(lastKey)), ERR_INCONSISTENT_STATE);\n        const value = near.storageGetEvictedRaw();\n        return getValueWithOptions(value, options);\n    }\n    /**\n     * Replaces the data stored at the provided index with the provided data and returns the previously stored data.\n     *\n     * @param index - The index at which to replace the data.\n     * @param element - The data to replace with.\n     * @param options - Options for retrieving and storing the data.\n     */\n    replace(index, element, options) {\n        assert(index < this.length, ERR_INDEX_OUT_OF_BOUNDS);\n        const key = indexToKey(this.prefix, index);\n        assert(near.storageWriteRaw(bytes(key), serializeValueWithOptions(element, options)), ERR_INCONSISTENT_STATE);\n        const value = near.storageGetEvictedRaw();\n        return getValueWithOptions(value, options);\n    }\n    /**\n     * Extends the current collection with the passed in array of elements.\n     *\n     * @param elements - The elements to extend the collection with.\n     */\n    extend(elements) {\n        for (const element of elements) {\n            this.push(element);\n        }\n    }\n    [Symbol.iterator]() {\n        return new VectorIterator(this);\n    }\n    /**\n     * Create a iterator on top of the default collection iterator using custom options.\n     *\n     * @param options - Options for retrieving and storing the data.\n     */\n    createIteratorWithOptions(options) {\n        return {\n            [Symbol.iterator]: () => new VectorIterator(this, options),\n        };\n    }\n    /**\n     * Return a JavaScript array of the data stored within the collection.\n     *\n     * @param options - Options for retrieving and storing the data.\n     */\n    toArray(options) {\n        const array = [];\n        const iterator = options ? this.createIteratorWithOptions(options) : this;\n        for (const value of iterator) {\n            array.push(value);\n        }\n        return array;\n    }\n    /**\n     * Remove all of the elements stored within the collection.\n     */\n    clear() {\n        for (let index = 0; index < this.length; index++) {\n            const key = indexToKey(this.prefix, index);\n            near.storageRemoveRaw(bytes(key));\n        }\n        this.length = 0;\n    }\n    /**\n     * Serialize the collection.\n     *\n     * @param options - Options for storing the data.\n     */\n    serialize(options) {\n        return serializeValueWithOptions(this, options);\n    }\n    /**\n     * Converts the deserialized data from storage to a JavaScript instance of the collection.\n     *\n     * @param data - The deserialized data to create an instance from.\n     */\n    static reconstruct(data) {\n        const vector = new Vector(data.prefix, data.length);\n        return vector;\n    }\n}\n/**\n * An iterator for the Vector collection.\n */\nexport class VectorIterator {\n    /**\n     * @param vector - The vector collection to create an iterator for.\n     * @param options - Options for retrieving and storing data.\n     */\n    constructor(vector, options) {\n        this.vector = vector;\n        this.options = options;\n        this.current = 0;\n    }\n    next() {\n        if (this.current >= this.vector.length) {\n            return { value: null, done: true };\n        }\n        const value = this.vector.get(this.current, this.options);\n        this.current += 1;\n        return { value, done: false };\n    }\n}\n","import { assert, ERR_INCONSISTENT_STATE, getValueWithOptions, serializeValueWithOptions, encode, decode, } from \"../utils\";\nimport { Vector, VectorIterator } from \"./vector\";\nimport { LookupMap } from \"./lookup-map\";\n/**\n * An unordered map that stores data in NEAR storage.\n */\nexport class UnorderedMap {\n    /**\n     * @param prefix - The byte prefix to use when storing elements inside this collection.\n     */\n    constructor(prefix) {\n        this.prefix = prefix;\n        this.keys = new Vector(`${prefix}u`); // intentional different prefix with old UnorderedMap\n        this.values = new LookupMap(`${prefix}m`);\n    }\n    /**\n     * The number of elements stored in the collection.\n     */\n    get length() {\n        return this.keys.length;\n    }\n    /**\n     * Checks whether the collection is empty.\n     */\n    isEmpty() {\n        return this.keys.isEmpty();\n    }\n    /**\n     * Get the data stored at the provided key.\n     *\n     * @param key - The key at which to look for the data.\n     * @param options - Options for retrieving the data.\n     */\n    get(key, options) {\n        const valueAndIndex = this.values.get(key);\n        if (valueAndIndex === null) {\n            return options?.defaultValue ?? null;\n        }\n        const [value] = valueAndIndex;\n        return getValueWithOptions(encode(value), options);\n    }\n    /**\n     * Store a new value at the provided key.\n     *\n     * @param key - The key at which to store in the collection.\n     * @param value - The value to store in the collection.\n     * @param options - Options for retrieving and storing the data.\n     */\n    set(key, value, options) {\n        const valueAndIndex = this.values.get(key);\n        const serialized = serializeValueWithOptions(value, options);\n        if (valueAndIndex === null) {\n            const newElementIndex = this.length;\n            this.keys.push(key);\n            this.values.set(key, [decode(serialized), newElementIndex]);\n            return null;\n        }\n        const [oldValue, oldIndex] = valueAndIndex;\n        this.values.set(key, [decode(serialized), oldIndex]);\n        return getValueWithOptions(encode(oldValue), options);\n    }\n    /**\n     * Removes and retrieves the element with the provided key.\n     *\n     * @param key - The key at which to remove data.\n     * @param options - Options for retrieving the data.\n     */\n    remove(key, options) {\n        const oldValueAndIndex = this.values.remove(key);\n        if (oldValueAndIndex === null) {\n            return options?.defaultValue ?? null;\n        }\n        const [value, index] = oldValueAndIndex;\n        assert(this.keys.swapRemove(index) !== null, ERR_INCONSISTENT_STATE);\n        // the last key is swapped to key[index], the corresponding [value, index] need update\n        if (!this.keys.isEmpty() && index !== this.keys.length) {\n            // if there is still elements and it was not the last element\n            const swappedKey = this.keys.get(index);\n            const swappedValueAndIndex = this.values.get(swappedKey);\n            assert(swappedValueAndIndex !== null, ERR_INCONSISTENT_STATE);\n            this.values.set(swappedKey, [swappedValueAndIndex[0], index]);\n        }\n        return getValueWithOptions(encode(value), options);\n    }\n    /**\n     * Remove all of the elements stored within the collection.\n     */\n    clear() {\n        for (const key of this.keys) {\n            // Set instead of remove to avoid loading the value from storage.\n            this.values.set(key, null);\n        }\n        this.keys.clear();\n    }\n    [Symbol.iterator]() {\n        return new UnorderedMapIterator(this);\n    }\n    /**\n     * Create a iterator on top of the default collection iterator using custom options.\n     *\n     * @param options - Options for retrieving and storing the data.\n     */\n    createIteratorWithOptions(options) {\n        return {\n            [Symbol.iterator]: () => new UnorderedMapIterator(this, options),\n        };\n    }\n    /**\n     * Return a JavaScript array of the data stored within the collection.\n     *\n     * @param options - Options for retrieving and storing the data.\n     */\n    toArray(options) {\n        const array = [];\n        const iterator = options ? this.createIteratorWithOptions(options) : this;\n        for (const value of iterator) {\n            array.push(value);\n        }\n        return array;\n    }\n    /**\n     * Extends the current collection with the passed in array of key-value pairs.\n     *\n     * @param keyValuePairs - The key-value pairs to extend the collection with.\n     */\n    extend(keyValuePairs) {\n        for (const [key, value] of keyValuePairs) {\n            this.set(key, value);\n        }\n    }\n    /**\n     * Serialize the collection.\n     *\n     * @param options - Options for storing the data.\n     */\n    serialize(options) {\n        return serializeValueWithOptions(this, options);\n    }\n    /**\n     * Converts the deserialized data from storage to a JavaScript instance of the collection.\n     *\n     * @param data - The deserialized data to create an instance from.\n     */\n    static reconstruct(data) {\n        const map = new UnorderedMap(data.prefix);\n        // reconstruct keys Vector\n        map.keys = new Vector(`${data.prefix}u`);\n        map.keys.length = data.keys.length;\n        // reconstruct values LookupMap\n        map.values = new LookupMap(`${data.prefix}m`);\n        return map;\n    }\n}\n/**\n * An iterator for the UnorderedMap collection.\n */\nclass UnorderedMapIterator {\n    /**\n     * @param unorderedMap - The unordered map collection to create an iterator for.\n     * @param options - Options for retrieving and storing data.\n     */\n    constructor(unorderedMap, options) {\n        this.options = options;\n        this.keys = new VectorIterator(unorderedMap.keys);\n        this.map = unorderedMap.values;\n    }\n    next() {\n        const key = this.keys.next();\n        if (key.done) {\n            return { value: [key.value, null], done: key.done };\n        }\n        const valueAndIndex = this.map.get(key.value);\n        assert(valueAndIndex !== null, ERR_INCONSISTENT_STATE);\n        return {\n            done: key.done,\n            value: [\n                key.value,\n                getValueWithOptions(encode(valueAndIndex[0]), this.options),\n            ],\n        };\n    }\n}\n","import * as near from \"./api\";\nimport { deserialize, serialize, bytes, encode } from \"./utils\";\n/**\n * Tells the SDK to use this function as the initialization function of the contract.\n *\n * @param _empty - An empty object.\n */\nexport function initialize(_empty) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return function (_target, _key, _descriptor\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n    ) { };\n}\n/**\n * Tells the SDK to expose this function as a view function.\n *\n * @param _empty - An empty object.\n */\nexport function view(_empty) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return function (_target, _key, _descriptor\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n    ) { };\n}\nexport function call({ privateFunction = false, payableFunction = false, }) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return function (_target, _key, descriptor) {\n        const originalMethod = descriptor.value;\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        descriptor.value = function (...args) {\n            if (privateFunction &&\n                near.predecessorAccountId() !== near.currentAccountId()) {\n                throw new Error(\"Function is private\");\n            }\n            if (!payableFunction && near.attachedDeposit() > 0n) {\n                throw new Error(\"Function is not payable\");\n            }\n            return originalMethod.apply(this, args);\n        };\n    };\n}\n/**\n * Tells the SDK to apply an array of passed in middleware to the function execution.\n *\n * @param middlewares - The middlewares to be executed.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function middleware(...middlewares) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return function (_target, _key, descriptor) {\n        const originalMethod = descriptor.value;\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        descriptor.value = function (...args) {\n            try {\n                middlewares.forEach((middleware) => middleware(...args));\n            }\n            catch (error) {\n                throw new Error(error);\n            }\n            return originalMethod.apply(this, args);\n        };\n    };\n}\nexport function NearBindgen({ requireInit = false, serializer = serialize, deserializer = deserialize, }) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (target) => {\n        return class extends target {\n            static _create() {\n                return new target();\n            }\n            static _getState() {\n                const rawState = near.storageReadRaw(bytes(\"STATE\"));\n                return rawState ? this._deserialize(rawState) : null;\n            }\n            static _saveToStorage(objectToSave) {\n                near.storageWriteRaw(bytes(\"STATE\"), this._serialize(objectToSave));\n            }\n            static _getArgs() {\n                return JSON.parse(near.input() || \"{}\");\n            }\n            static _serialize(value, forReturn = false) {\n                if (forReturn) {\n                    return encode(JSON.stringify(value, (_, value) => typeof value === \"bigint\" ? `${value}` : value));\n                }\n                return serializer(value);\n            }\n            static _deserialize(value) {\n                return deserializer(value);\n            }\n            static _reconstruct(classObject, plainObject) {\n                for (const item in classObject) {\n                    const reconstructor = classObject[item].constructor?.reconstruct;\n                    classObject[item] = reconstructor\n                        ? reconstructor(plainObject[item])\n                        : plainObject[item];\n                }\n                return classObject;\n            }\n            static _requireInit() {\n                return requireInit;\n            }\n        };\n    };\n}\n","import { assert } from \"./utils\";\nimport * as near from \"./api\";\n/**\n * A promise action which can be executed on the NEAR blockchain.\n */\nexport class PromiseAction {\n}\n/**\n * A create account promise action.\n *\n * @extends {PromiseAction}\n */\nexport class CreateAccount extends PromiseAction {\n    add(promiseIndex) {\n        near.promiseBatchActionCreateAccount(promiseIndex);\n    }\n}\n/**\n * A deploy contract promise action.\n *\n * @extends {PromiseAction}\n */\nexport class DeployContract extends PromiseAction {\n    /**\n     * @param code - The code of the contract to be deployed.\n     */\n    constructor(code) {\n        super();\n        this.code = code;\n    }\n    add(promiseIndex) {\n        near.promiseBatchActionDeployContract(promiseIndex, this.code);\n    }\n}\n/**\n * A function call promise action.\n *\n * @extends {PromiseAction}\n */\nexport class FunctionCall extends PromiseAction {\n    /**\n     * @param functionName - The name of the function to be called.\n     * @param args - The utf-8 string arguments to be passed to the function.\n     * @param amount - The amount of NEAR to attach to the call.\n     * @param gas - The amount of Gas to attach to the call.\n     */\n    constructor(functionName, args, amount, gas) {\n        super();\n        this.functionName = functionName;\n        this.args = args;\n        this.amount = amount;\n        this.gas = gas;\n    }\n    add(promiseIndex) {\n        near.promiseBatchActionFunctionCall(promiseIndex, this.functionName, this.args, this.amount, this.gas);\n    }\n}\n/**\n * A function call raw promise action.\n *\n * @extends {PromiseAction}\n */\nexport class FunctionCallRaw extends PromiseAction {\n    /**\n     * @param functionName - The name of the function to be called.\n     * @param args - The arguments to be passed to the function.\n     * @param amount - The amount of NEAR to attach to the call.\n     * @param gas - The amount of Gas to attach to the call.\n     */\n    constructor(functionName, args, amount, gas) {\n        super();\n        this.functionName = functionName;\n        this.args = args;\n        this.amount = amount;\n        this.gas = gas;\n    }\n    add(promiseIndex) {\n        near.promiseBatchActionFunctionCallRaw(promiseIndex, this.functionName, this.args, this.amount, this.gas);\n    }\n}\n/**\n * A function call weight promise action.\n *\n * @extends {PromiseAction}\n */\nexport class FunctionCallWeight extends PromiseAction {\n    /**\n     * @param functionName - The name of the function to be called.\n     * @param args - The utf-8 string arguments to be passed to the function.\n     * @param amount - The amount of NEAR to attach to the call.\n     * @param gas - The amount of Gas to attach to the call.\n     * @param weight - The weight of unused Gas to use.\n     */\n    constructor(functionName, args, amount, gas, weight) {\n        super();\n        this.functionName = functionName;\n        this.args = args;\n        this.amount = amount;\n        this.gas = gas;\n        this.weight = weight;\n    }\n    add(promiseIndex) {\n        near.promiseBatchActionFunctionCallWeight(promiseIndex, this.functionName, this.args, this.amount, this.gas, this.weight);\n    }\n}\n/**\n * A function call weight raw promise action.\n *\n * @extends {PromiseAction}\n */\nexport class FunctionCallWeightRaw extends PromiseAction {\n    /**\n     * @param functionName - The name of the function to be called.\n     * @param args - The arguments to be passed to the function.\n     * @param amount - The amount of NEAR to attach to the call.\n     * @param gas - The amount of Gas to attach to the call.\n     * @param weight - The weight of unused Gas to use.\n     */\n    constructor(functionName, args, amount, gas, weight) {\n        super();\n        this.functionName = functionName;\n        this.args = args;\n        this.amount = amount;\n        this.gas = gas;\n        this.weight = weight;\n    }\n    add(promiseIndex) {\n        near.promiseBatchActionFunctionCallWeightRaw(promiseIndex, this.functionName, this.args, this.amount, this.gas, this.weight);\n    }\n}\n/**\n * A transfer promise action.\n *\n * @extends {PromiseAction}\n */\nexport class Transfer extends PromiseAction {\n    /**\n     * @param amount - The amount of NEAR to tranfer.\n     */\n    constructor(amount) {\n        super();\n        this.amount = amount;\n    }\n    add(promiseIndex) {\n        near.promiseBatchActionTransfer(promiseIndex, this.amount);\n    }\n}\n/**\n * A stake promise action.\n *\n * @extends {PromiseAction}\n */\nexport class Stake extends PromiseAction {\n    /**\n     * @param amount - The amount of NEAR to tranfer.\n     * @param publicKey - The public key to use for staking.\n     */\n    constructor(amount, publicKey) {\n        super();\n        this.amount = amount;\n        this.publicKey = publicKey;\n    }\n    add(promiseIndex) {\n        near.promiseBatchActionStake(promiseIndex, this.amount, this.publicKey.data);\n    }\n}\n/**\n * A add full access key promise action.\n *\n * @extends {PromiseAction}\n */\nexport class AddFullAccessKey extends PromiseAction {\n    /**\n     * @param publicKey - The public key to add as a full access key.\n     * @param nonce - The nonce to use.\n     */\n    constructor(publicKey, nonce) {\n        super();\n        this.publicKey = publicKey;\n        this.nonce = nonce;\n    }\n    add(promiseIndex) {\n        near.promiseBatchActionAddKeyWithFullAccess(promiseIndex, this.publicKey.data, this.nonce);\n    }\n}\n/**\n * A add access key promise action.\n *\n * @extends {PromiseAction}\n */\nexport class AddAccessKey extends PromiseAction {\n    /**\n     * @param publicKey - The public key to add as a access key.\n     * @param allowance - The allowance for the key in yoctoNEAR.\n     * @param receiverId - The account ID of the reciever.\n     * @param functionNames - The names of funcitons to authorize.\n     * @param nonce - The nonce to use.\n     */\n    constructor(publicKey, allowance, receiverId, functionNames, nonce) {\n        super();\n        this.publicKey = publicKey;\n        this.allowance = allowance;\n        this.receiverId = receiverId;\n        this.functionNames = functionNames;\n        this.nonce = nonce;\n    }\n    add(promiseIndex) {\n        near.promiseBatchActionAddKeyWithFunctionCall(promiseIndex, this.publicKey.data, this.nonce, this.allowance, this.receiverId, this.functionNames);\n    }\n}\n/**\n * A delete key promise action.\n *\n * @extends {PromiseAction}\n */\nexport class DeleteKey extends PromiseAction {\n    /**\n     * @param publicKey - The public key to delete from the account.\n     */\n    constructor(publicKey) {\n        super();\n        this.publicKey = publicKey;\n    }\n    add(promiseIndex) {\n        near.promiseBatchActionDeleteKey(promiseIndex, this.publicKey.data);\n    }\n}\n/**\n * A delete account promise action.\n *\n * @extends {PromiseAction}\n */\nexport class DeleteAccount extends PromiseAction {\n    /**\n     * @param beneficiaryId - The beneficiary of the account deletion - the account to recieve all of the remaining funds of the deleted account.\n     */\n    constructor(beneficiaryId) {\n        super();\n        this.beneficiaryId = beneficiaryId;\n    }\n    add(promiseIndex) {\n        near.promiseBatchActionDeleteAccount(promiseIndex, this.beneficiaryId);\n    }\n}\nclass PromiseSingle {\n    constructor(accountId, actions, after, promiseIndex) {\n        this.accountId = accountId;\n        this.actions = actions;\n        this.after = after;\n        this.promiseIndex = promiseIndex;\n    }\n    constructRecursively() {\n        if (this.promiseIndex !== null) {\n            return this.promiseIndex;\n        }\n        const promiseIndex = this.after\n            ? near.promiseBatchThen(this.after.constructRecursively(), this.accountId)\n            : near.promiseBatchCreate(this.accountId);\n        this.actions.forEach((action) => action.add(promiseIndex));\n        this.promiseIndex = promiseIndex;\n        return promiseIndex;\n    }\n}\nexport class PromiseJoint {\n    constructor(promiseA, promiseB, promiseIndex) {\n        this.promiseA = promiseA;\n        this.promiseB = promiseB;\n        this.promiseIndex = promiseIndex;\n    }\n    constructRecursively() {\n        if (this.promiseIndex !== null) {\n            return this.promiseIndex;\n        }\n        const result = near.promiseAnd(this.promiseA.constructRecursively(), this.promiseB.constructRecursively());\n        this.promiseIndex = result;\n        return result;\n    }\n}\n/**\n * A high level class to construct and work with NEAR promises.\n */\nexport class NearPromise {\n    /**\n     * @param subtype - The subtype of the promise.\n     * @param shouldReturn - Whether the promise should return.\n     */\n    constructor(subtype, shouldReturn) {\n        this.subtype = subtype;\n        this.shouldReturn = shouldReturn;\n    }\n    /**\n     * Creates a new promise to the provided account ID.\n     *\n     * @param accountId - The account ID on which to call the promise.\n     */\n    static new(accountId) {\n        const subtype = new PromiseSingle(accountId, [], null, null);\n        return new NearPromise(subtype, false);\n    }\n    addAction(action) {\n        if (this.subtype instanceof PromiseJoint) {\n            throw new Error(\"Cannot add action to a joint promise.\");\n        }\n        this.subtype.actions.push(action);\n        return this;\n    }\n    /**\n     * Creates a create account promise action and adds it to the current promise.\n     */\n    createAccount() {\n        return this.addAction(new CreateAccount());\n    }\n    /**\n     * Creates a deploy contract promise action and adds it to the current promise.\n     *\n     * @param code - The code of the contract to be deployed.\n     */\n    deployContract(code) {\n        return this.addAction(new DeployContract(code));\n    }\n    /**\n     * Creates a function call promise action and adds it to the current promise.\n     *\n     * @param functionName - The name of the function to be called.\n     * @param args - The utf-8 string arguments to be passed to the function.\n     * @param amount - The amount of NEAR to attach to the call.\n     * @param gas - The amount of Gas to attach to the call.\n     */\n    functionCall(functionName, args, amount, gas) {\n        return this.addAction(new FunctionCall(functionName, args, amount, gas));\n    }\n    /**\n     * Creates a function call raw promise action and adds it to the current promise.\n     *\n     * @param functionName - The name of the function to be called.\n     * @param args - The arguments to be passed to the function.\n     * @param amount - The amount of NEAR to attach to the call.\n     * @param gas - The amount of Gas to attach to the call.\n     */\n    functionCallRaw(functionName, args, amount, gas) {\n        return this.addAction(new FunctionCallRaw(functionName, args, amount, gas));\n    }\n    /**\n     * Creates a function call weight promise action and adds it to the current promise.\n     *\n     * @param functionName - The name of the function to be called.\n     * @param args - The utf-8 string arguments to be passed to the function.\n     * @param amount - The amount of NEAR to attach to the call.\n     * @param gas - The amount of Gas to attach to the call.\n     * @param weight - The weight of unused Gas to use.\n     */\n    functionCallWeight(functionName, args, amount, gas, weight) {\n        return this.addAction(new FunctionCallWeight(functionName, args, amount, gas, weight));\n    }\n    /**\n     * Creates a function call weight raw promise action and adds it to the current promise.\n     *\n     * @param functionName - The name of the function to be called.\n     * @param args - The arguments to be passed to the function.\n     * @param amount - The amount of NEAR to attach to the call.\n     * @param gas - The amount of Gas to attach to the call.\n     * @param weight - The weight of unused Gas to use.\n     */\n    functionCallWeightRaw(functionName, args, amount, gas, weight) {\n        return this.addAction(new FunctionCallWeightRaw(functionName, args, amount, gas, weight));\n    }\n    /**\n     * Creates a transfer promise action and adds it to the current promise.\n     *\n     * @param amount - The amount of NEAR to tranfer.\n     */\n    transfer(amount) {\n        return this.addAction(new Transfer(amount));\n    }\n    /**\n     * Creates a stake promise action and adds it to the current promise.\n     *\n     * @param amount - The amount of NEAR to tranfer.\n     * @param publicKey - The public key to use for staking.\n     */\n    stake(amount, publicKey) {\n        return this.addAction(new Stake(amount, publicKey));\n    }\n    /**\n     * Creates a add full access key promise action and adds it to the current promise.\n     * Uses 0n as the nonce.\n     *\n     * @param publicKey - The public key to add as a full access key.\n     */\n    addFullAccessKey(publicKey) {\n        return this.addFullAccessKeyWithNonce(publicKey, 0n);\n    }\n    /**\n     * Creates a add full access key promise action and adds it to the current promise.\n     * Allows you to specify the nonce.\n     *\n     * @param publicKey - The public key to add as a full access key.\n     * @param nonce - The nonce to use.\n     */\n    addFullAccessKeyWithNonce(publicKey, nonce) {\n        return this.addAction(new AddFullAccessKey(publicKey, nonce));\n    }\n    /**\n     * Creates a add access key promise action and adds it to the current promise.\n     * Uses 0n as the nonce.\n     *\n     * @param publicKey - The public key to add as a access key.\n     * @param allowance - The allowance for the key in yoctoNEAR.\n     * @param receiverId - The account ID of the reciever.\n     * @param functionNames - The names of funcitons to authorize.\n     */\n    addAccessKey(publicKey, allowance, receiverId, functionNames) {\n        return this.addAccessKeyWithNonce(publicKey, allowance, receiverId, functionNames, 0n);\n    }\n    /**\n     * Creates a add access key promise action and adds it to the current promise.\n     * Allows you to specify the nonce.\n     *\n     * @param publicKey - The public key to add as a access key.\n     * @param allowance - The allowance for the key in yoctoNEAR.\n     * @param receiverId - The account ID of the reciever.\n     * @param functionNames - The names of funcitons to authorize.\n     * @param nonce - The nonce to use.\n     */\n    addAccessKeyWithNonce(publicKey, allowance, receiverId, functionNames, nonce) {\n        return this.addAction(new AddAccessKey(publicKey, allowance, receiverId, functionNames, nonce));\n    }\n    /**\n     * Creates a delete key promise action and adds it to the current promise.\n     *\n     * @param publicKey - The public key to delete from the account.\n     */\n    deleteKey(publicKey) {\n        return this.addAction(new DeleteKey(publicKey));\n    }\n    /**\n     * Creates a delete account promise action and adds it to the current promise.\n     *\n     * @param beneficiaryId - The beneficiary of the account deletion - the account to recieve all of the remaining funds of the deleted account.\n     */\n    deleteAccount(beneficiaryId) {\n        return this.addAction(new DeleteAccount(beneficiaryId));\n    }\n    /**\n     * Joins the provided promise with the current promise, making the current promise a joint promise subtype.\n     *\n     * @param other - The promise to join with the current promise.\n     */\n    and(other) {\n        const subtype = new PromiseJoint(this, other, null);\n        return new NearPromise(subtype, false);\n    }\n    /**\n     * Adds a callback to the current promise.\n     *\n     * @param other - The promise to be executed as the promise.\n     */\n    then(other) {\n        assert(other.subtype instanceof PromiseSingle, \"Cannot callback joint promise.\");\n        assert(other.subtype.after === null, \"Cannot callback promise which is already scheduled after another\");\n        other.subtype.after = this;\n        return other;\n    }\n    /**\n     * Sets the shouldReturn field to true.\n     */\n    asReturn() {\n        this.shouldReturn = true;\n        return this;\n    }\n    /**\n     * Recursively goes through the current promise to get the promise index.\n     */\n    constructRecursively() {\n        const result = this.subtype.constructRecursively();\n        if (this.shouldReturn) {\n            near.promiseReturn(result);\n        }\n        return result;\n    }\n    /**\n     * Called by NearBindgen, when return object is a NearPromise instance.\n     */\n    onReturn() {\n        this.asReturn().constructRecursively();\n    }\n}\n","import { call, LookupMap, NearBindgen, view, assert, near, UnorderedMap, NearPromise } from \"near-sdk-js\";\nimport { run_validate_method_on_asset } from \"./validate\";\nimport { Configuration, OpenAIApi, ChatCompletionRequestMessage } from 'openai';\nimport * as fs from 'fs';\n@NearBindgen({})\nexport class EscrowContract {\n    GAS_FEE: bigint = BigInt(30_000_000_000_000); // 30 TGAS\n    accountsReceivers: LookupMap<string> = new LookupMap(\"ea\");\n    accountsValueLocked: LookupMap<string> = new LookupMap(\"avl\");\n    accountAssetsQuantity: LookupMap<string> = new LookupMap(\"aa\");\n    accountsTimeCreated: UnorderedMap<string> = new UnorderedMap(\"atc\");\n    accountsAssetContractId: LookupMap<string> = new LookupMap(\"aac\");\n\n    internalSendNEAR(receivingAccountId: string, amountBigInt: bigint): void {\n        assert(amountBigInt > BigInt(\"0\"), \"The amount should be a positive number\");\n        assert(receivingAccountId != near.currentAccountId(), \"Can't transfer to the contract itself\");\n        assert(amountBigInt < near.accountBalance(), `Not enough balance ${near.accountBalance()} to cover transfer of ${amountBigInt} yoctoNEAR`);\n        const promise = NearPromise.new(receivingAccountId);\n        near.log(`Sending ${amountBigInt} yoctoNEAR to ${receivingAccountId} in internalSendNEAR`);\n        promise.transfer(amountBigInt);\n        promise.onReturn();\n    }\n\n    internalCompleteNEARTransaction(sellerAccountId: string, amountBigInt: bigint, buyerAccountId: string): void {\n        this.internalSendNEAR(sellerAccountId, amountBigInt);\n        this.accountsReceivers.remove(buyerAccountId);\n        near.log(`Removing ${buyerAccountId} from accountsReceivers`);\n        this.accountsValueLocked.remove(buyerAccountId);\n        this.accountAssetsQuantity.remove(buyerAccountId);\n        this.accountsAssetContractId.remove(buyerAccountId);\n        this.accountsTimeCreated.remove(buyerAccountId);\n    }\n\n\n    internalCrossContractTransferAsset(assetContractId: string, quantityBigInt: bigint, fromAccountId: string, toAccountId: string): void {\n        const promise = NearPromise.new(assetContractId);\n        promise.functionCall(\n            \"transfer_asset\",\n            JSON.stringify({ quantity: quantityBigInt.toString(), from_account_id: fromAccountId, to_account_id: toAccountId }),\n            BigInt(0),\n            this.GAS_FEE\n        );\n        promise.onReturn();\n    }\n\n    validate_purchase_asset({ validate, buyer_account_id, asset_contract_id }: { validate: boolean, buyer_account_id: string, asset_contract_id: string }): void {\n        const callerId: string = near.predecessorAccountId();\n        assert(callerId === 'ai_escrow.testnet', 'Only the ai_escrow.testnet account can call this method');\n        if (validate) {\n            // approve purchase, call approve_purchase\n            const promise = NearPromise.new(this.accountsAssetContractId.get(buyer_account_id)!);\n            promise.functionCall(\"approve_purchase\", JSON.stringify({\n                buyer_account_id: buyer_account_id,\n                asset_contract_id: asset_contract_id\n            }), BigInt(0), this.GAS_FEE).onReturn();\n            near.log(`Approved purchase of ${asset_contract_id} by ${buyer_account_id}`);\n        }\n        else {\n            // cancel purchase, call cancel_purchase\n            const promise = NearPromise.new(this.accountsAssetContractId.get(buyer_account_id)!);\n            promise.functionCall(\"cancel_purchase\", JSON.stringify({\n                buyer_account_id: buyer_account_id,\n                asset_contract_id: asset_contract_id\n            }), BigInt(0), this.GAS_FEE).onReturn();\n            near.log(`Cancelled purchase of ${asset_contract_id} by ${buyer_account_id}`);\n        }\n\n    }\n\n\n\n    @call({ payableFunction: true })\n    purchase_in_escrow({ seller_account_id, asset_contract_id, validation_user_request }: { seller_account_id: string, asset_contract_id: string, validation_user_request?: string }): NearPromise {\n        const nearAttachedAmount: bigint = near.attachedDeposit();\n        const nearAmount: bigint = nearAttachedAmount - BigInt(this.GAS_FEE);\n        const buyerAccountId: string = near.predecessorAccountId();\n        assert(nearAmount > 0, \"Must attach a positive amount\");\n        assert(!this.accountsValueLocked.containsKey(buyerAccountId), \"Cannot escrow purchase twice before completing one first: feature not implemented\");\n        assert(seller_account_id !== buyerAccountId, \"Cannot escrow to the same account\");\n        assert(buyerAccountId !== near.currentAccountId(), \"Cannot escrow from the contract itself\");\n\n        this.accountsReceivers.set(buyerAccountId, seller_account_id);\n        this.accountsValueLocked.set(buyerAccountId, nearAttachedAmount.toString());\n        this.accountsAssetContractId.set(buyerAccountId, asset_contract_id);\n        this.accountsTimeCreated.set(buyerAccountId, near.blockTimestamp().toString());\n        this.accountAssetsQuantity.set(buyerAccountId, \"0\");\n        const promise = NearPromise.new(asset_contract_id);\n        near.log(`Escrow purchase from ${asset_contract_id} ${buyerAccountId} to ${seller_account_id} for ${nearAmount} yoctoNEAR`);\n        near.log(`Promise as return ${promise.asReturn()}}`)\n        promise.functionCall(\"escrow_purchase_asset\", JSON.stringify({\n            seller_account_id,\n            buyer_account_id: buyerAccountId,\n            attached_near: nearAmount.toString()\n        }),\n            BigInt(0), this.GAS_FEE)\n            .then(\n                NearPromise.new(near.currentAccountId())\n                    .functionCall(\"internalPurchaseEscrow\", JSON.stringify({ validation_user_request, buyerAccountId, asset_contract_id }), BigInt(0), this.GAS_FEE)\n            );\n        return promise.asReturn();\n    }\n\n    @call({ privateFunction: true })\n    internalPurchaseEscrow({ validation_user_request, buyer_account_id, asset_contract_id }: { validation_user_request: string, buyer_account_id: string, asset_contract_id: string }): void {\n        const promiseResult: string = near.promiseResult(0 as number);\n        near.log(`Escrow purchase result: ${promiseResult}`)\n        const promiseObject = JSON.parse(promiseResult);\n        if (promiseObject.success === false) {\n            const amount: bigint = BigInt(this.accountsValueLocked.get(promiseObject.buyer_account_id)!);\n            near.log(`Escrow purchase failed, returning ${amount} yoctoNEAR to: ${promiseObject.buyer_account_id}`);\n            this.internalCompleteNEARTransaction(promiseObject.buyer_account_id, amount, promiseObject.buyer_account_id);\n            return;\n        }\n        const buyerAccountId: string = promiseObject.buyer_account_id;\n        const quantity: bigint = BigInt(promiseObject.quantity);\n        this.accountAssetsQuantity.set(buyerAccountId, quantity.toString());\n\n\n    }\n\n    @call({})\n    escrow_timeout_scan({ }: {}): void {\n        const callerId: string = near.predecessorAccountId();\n        const timeout: bigint = callerId === \"test.near\" ? BigInt(-1) : BigInt(86_400_000_000_000); // 24 hours in nanoseconds. Testing workaround until fast-forward is implemented in workspaces-js\n        const keys = this.accountsTimeCreated.toArray();\n        keys.forEach(([buyerAccountId, _]: [string, string]) => {\n            const timeCreatedStr: string | null = this.accountsTimeCreated.get(buyerAccountId);\n            if (timeCreatedStr) {\n                const timeCreated: bigint = BigInt(timeCreatedStr);\n                if (timeCreated + timeout < near.blockTimestamp()) {\n                    const receiverId: string = this.accountsReceivers.get(buyerAccountId)!;\n                    const amount: bigint = BigInt(this.accountsValueLocked.get(buyerAccountId)!);\n                    this.internalCompleteNEARTransaction(receiverId, amount, buyerAccountId);\n                }\n            }\n        });\n    }\n\n    @call({})\n    approve_purchase({ }: {}): void {\n        const buyerAccountId: string = near.predecessorAccountId();\n        assert(this.accountsValueLocked.containsKey(buyerAccountId), \"Cannot approve escrow purchase before escrowing\");\n        const sellerAccountId: string = this.accountsReceivers.get(buyerAccountId)!;\n        const amount: bigint = BigInt(this.accountsValueLocked.get(buyerAccountId)!);\n        near.log(`Approving escrow purchase of ${amount} yoctoNEAR from: ${buyerAccountId} to: ${sellerAccountId}`);\n        this.internalCompleteNEARTransaction(sellerAccountId, amount, buyerAccountId);\n    }\n\n    @call({})\n    cancel_purchase({ }: {}): void {\n        const buyerAccountId: string = near.predecessorAccountId();\n        const amountStr: string | null = this.accountsValueLocked.get(buyerAccountId);\n        assert(amountStr, `No escrow purchase found for buyer: ${buyerAccountId}`);\n        const amount: bigint = BigInt(amountStr);\n        const sellerAccountId: string = this.accountsReceivers.get(buyerAccountId)!;\n        const assetContractId: string = this.accountsAssetContractId.get(buyerAccountId)!;\n        const quantity: bigint = BigInt(this.accountAssetsQuantity.get(buyerAccountId)!);\n        this.internalCompleteNEARTransaction(buyerAccountId, amount, buyerAccountId); // return funds to buyer\n        const promise = NearPromise.new(assetContractId);\n        promise.functionCall(\"devalidate_asset\", JSON.stringify({\n            seller_account_id: sellerAccountId,\n            buyer_account_id: buyerAccountId,\n        }),\n            BigInt(0), this.GAS_FEE).onReturn();\n        near.log(`Canceling escrow purchase of ${quantity} from: ${buyerAccountId} to: ${sellerAccountId}`);\n        // this.internalCrossContractTransferAsset(assetContractId, quantity, buyerAccountId, sellerAccountId);\n    }\n\n    @view({})\n    view_pending_escrow({ account_id }: { account_id: string }): any {\n        return {\n            receiver_id: this.accountsReceivers.get(account_id),\n            amount: this.accountsValueLocked.get(account_id),\n            time_created: this.accountsTimeCreated.get(account_id),\n        };\n    }\n\n}\n"],"names":["PromiseIndexBrand","TYPE_KEY","TypeBrand","ERR_INCONSISTENT_STATE","ERR_INDEX_OUT_OF_BOUNDS","assert","expression","message","Error","getValueWithOptions","value","options","deserializer","deserialize","defaultValue","deserialized","undefined","reconstructor","serializeValueWithOptions","serializer","serialize","valueToSerialize","encode","JSON","stringify","key","toString","BIGINT","Date","toISOString","DATE","valueToDeserialize","parse","decode","_","Object","keys","length","every","includes","BigInt","bytes","s","env","latin1_string_to_uint8array","str","a","uint8array_to_latin1_string","utf8_string_to_uint8array","uint8array_to_utf8_string","assertNumber","n","Number","isSafeInteger","chain","args","wrap","b","c","Array","from","reverse","reduce","acc","i","alphabet","digits","isArray","map","input","letter","index","indexOf","join","separator","to","split","padding","bits","chr","data","push","end","slice","normalize","fn","convertRadix","pos","res","forEach","d","carry","done","digit","digitBase","Math","floor","gcd","radix2carry","convertRadix2","mask","radix","num","Uint8Array","radix2","revPadding","unsafeWrapper","apply","e","base16","base32","toUpperCase","replace","base64","base64url","genBase58","abc","base58","XMR_BLOCK_LEN","base58xmr","block","subarray","padStart","blockLen","j","concat","BECH_ALPHABET","POLYMOD_GENERATORS","bech32Polymod","pre","chk","bechChecksum","prefix","words","encodingConst","len","charCodeAt","v","genBech32","encoding","ENCODING_CONST","_words","fromWords","toWords","fromWordsUnsafe","limit","actualLength","TypeError","toLowerCase","lowered","sepIndex","lastIndexOf","sum","endsWith","decodeUnsafe","decodeToBytes","utf8","TextDecoder","TextEncoder","hex","CODERS","CurveType","DataLength","PromiseResult","PromiseError","U64_MAX","EVICTED_REGISTER","log","params","accumulated","parameter","param","stringified","predecessorAccountId","predecessor_account_id","read_register","currentAccountId","current_account_id","blockTimestamp","block_timestamp","attachedDeposit","attached_deposit","accountBalance","account_balance","storageReadRaw","returnValue","storage_read","storageHasKeyRaw","storage_has_key","storageHasKey","storageGetEvictedRaw","storageWriteRaw","storage_write","storageRemoveRaw","storage_remove","storageRemove","inputRaw","promiseAnd","promiseIndexes","promise_and","promiseBatchCreate","accountId","promise_batch_create","promiseBatchThen","promiseIndex","promise_batch_then","promiseBatchActionCreateAccount","promise_batch_action_create_account","promiseBatchActionDeployContract","code","promise_batch_action_deploy_contract","promiseBatchActionFunctionCallRaw","methodName","amount","gas","promise_batch_action_function_call","promiseBatchActionFunctionCall","promiseBatchActionTransfer","promise_batch_action_transfer","promiseBatchActionStake","publicKey","promise_batch_action_stake","promiseBatchActionAddKeyWithFullAccess","nonce","promise_batch_action_add_key_with_full_access","promiseBatchActionAddKeyWithFunctionCall","allowance","receiverId","methodNames","promise_batch_action_add_key_with_function_call","promiseBatchActionDeleteKey","promise_batch_action_delete_key","promiseBatchActionDeleteAccount","beneficiaryId","promise_batch_action_delete_account","promiseBatchActionFunctionCallWeightRaw","weight","promise_batch_action_function_call_weight","promiseBatchActionFunctionCallWeight","promiseResultRaw","status","promise_result","Successful","Failed","NotReady","promiseResult","promiseReturn","promise_return","LookupMap","constructor","keyPrefix","containsKey","storageKey","near","get","remove","set","newValue","storageValue","extend","keyValuePairs","reconstruct","indexToKey","Uint32Array","array","buffer","Vector","isEmpty","swapRemove","pop","last","element","lastIndex","lastKey","elements","Symbol","iterator","VectorIterator","createIteratorWithOptions","toArray","clear","vector","current","next","UnorderedMap","values","valueAndIndex","serialized","newElementIndex","oldValue","oldIndex","oldValueAndIndex","swappedKey","swappedValueAndIndex","UnorderedMapIterator","unorderedMap","view","_empty","_target","_key","_descriptor","call","privateFunction","payableFunction","descriptor","originalMethod","NearBindgen","requireInit","target","_create","_getState","rawState","_deserialize","_saveToStorage","objectToSave","_serialize","_getArgs","forReturn","_reconstruct","classObject","plainObject","item","_requireInit","PromiseAction","CreateAccount","add","DeployContract","FunctionCall","functionName","FunctionCallRaw","FunctionCallWeight","FunctionCallWeightRaw","Transfer","Stake","AddFullAccessKey","AddAccessKey","functionNames","DeleteKey","DeleteAccount","PromiseSingle","actions","after","constructRecursively","action","PromiseJoint","promiseA","promiseB","result","NearPromise","subtype","shouldReturn","new","addAction","createAccount","deployContract","functionCall","functionCallRaw","functionCallWeight","functionCallWeightRaw","transfer","stake","addFullAccessKey","addFullAccessKeyWithNonce","addAccessKey","addAccessKeyWithNonce","deleteKey","deleteAccount","and","other","then","asReturn","onReturn","EscrowContract","_dec","_dec2","_dec3","_dec4","_dec5","_dec6","_dec7","_class","_class2","GAS_FEE","accountsReceivers","accountsValueLocked","accountAssetsQuantity","accountsTimeCreated","accountsAssetContractId","internalSendNEAR","receivingAccountId","amountBigInt","promise","internalCompleteNEARTransaction","sellerAccountId","buyerAccountId","internalCrossContractTransferAsset","assetContractId","quantityBigInt","fromAccountId","toAccountId","quantity","from_account_id","to_account_id","validate_purchase_asset","validate","buyer_account_id","asset_contract_id","callerId","purchase_in_escrow","seller_account_id","validation_user_request","nearAttachedAmount","nearAmount","attached_near","internalPurchaseEscrow","promiseObject","success","escrow_timeout_scan","timeout","timeCreatedStr","timeCreated","approve_purchase","cancel_purchase","amountStr","view_pending_escrow","account_id","receiver_id","time_created","_applyDecoratedDescriptor","prototype","getOwnPropertyDescriptor","_state","_contract","_args","_result","name","value_return"],"mappings":"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"}